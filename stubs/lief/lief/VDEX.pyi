from typing import Any, List, overload

import lief
import lief.OAT.Binary

class File(lief.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: File) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg0: File) -> bool: ...
    @property
    def dex2dex_json_info(self) -> str: ...
    @property
    def dex_files(self) -> lief.OAT.Binary.it_dex_files: ...
    @property
    def header(self) -> Any: ...

class Header(lief.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: Header) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg0: Header) -> bool: ...
    @property
    def dex_size(self) -> int: ...
    @property
    def magic(self) -> List[int[4]]: ...
    @property
    def nb_dex_files(self) -> int: ...
    @property
    def quickening_info_size(self) -> int: ...
    @property
    def verifier_deps_size(self) -> int: ...
    @property
    def version(self) -> int: ...

def android_version(*args, **kwargs) -> Any: ...
@overload
def is_vdex(path: str) -> bool: ...
@overload
def is_vdex(raw: List[int]) -> bool: ...
def parse(*args, **kwargs) -> Any: ...
@overload
def version(file: str) -> int: ...
@overload
def version(raw: List[int]) -> int: ...

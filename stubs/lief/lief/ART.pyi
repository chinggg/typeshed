from typing import Any, ClassVar, List, overload

import lief

class File(lief.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: File) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg0: File) -> bool: ...
    @property
    def header(self) -> Any: ...

class Header(lief.Object):
    def __init__(self, *args, **kwargs) -> None: ...
    def __eq__(self, arg0: Header) -> bool: ...
    def __hash__(self) -> int: ...
    def __ne__(self, arg0: Header) -> bool: ...
    @property
    def boot_image_begin(self) -> int: ...
    @property
    def boot_image_size(self) -> int: ...
    @property
    def boot_oat_begin(self) -> int: ...
    @property
    def boot_oat_size(self) -> int: ...
    @property
    def compile_pic(self) -> bool: ...
    @property
    def data_size(self) -> int: ...
    @property
    def image_begin(self) -> int: ...
    @property
    def image_roots(self) -> int: ...
    @property
    def image_size(self) -> int: ...
    @property
    def magic(self) -> List[int[4]]: ...
    @property
    def nb_methods(self) -> int: ...
    @property
    def nb_sections(self) -> int: ...
    @property
    def oat_checksum(self) -> int: ...
    @property
    def oat_data_end(self) -> int: ...
    @property
    def oat_file_begin(self) -> int: ...
    @property
    def oat_file_end(self) -> int: ...
    @property
    def patch_delta(self) -> int: ...
    @property
    def pointer_size(self) -> int: ...
    @property
    def storage_mode(self) -> STORAGE_MODES: ...
    @property
    def version(self) -> int: ...

class STORAGE_MODES:
    __members__: ClassVar[dict] = ...  # read-only
    LZ4: ClassVar[STORAGE_MODES] = ...
    LZ4HC: ClassVar[STORAGE_MODES] = ...
    UNCOMPRESSED: ClassVar[STORAGE_MODES] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def android_version(*args, **kwargs) -> Any: ...
@overload
def is_art(path: str) -> bool: ...
@overload
def is_art(raw: List[int]) -> bool: ...
def parse(*args, **kwargs) -> Any: ...
@overload
def version(file: str) -> int: ...
@overload
def version(raw: List[int]) -> int: ...
